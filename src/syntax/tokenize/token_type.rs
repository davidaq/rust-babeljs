// This file should not be directly used
// code generated by src/build.rs according to this file

{
  def!(flag COMMENT);
  def!(flag BEFORE_EXPR);
  def!(flag IS_LOOP);
  def!(flag KEYWORD);
  def!(flag RESERVED);
  def!(flag LITERAL);
  def!(flag OPERATOR);
  def!(flag ASSIGN_OPERATOR);

  // Seperation
  def!(token COLON      = :     <: BEFORE_EXPR);
  def!(token SEMI_COLON = ;     <: BEFORE_EXPR);
  def!(token COMMA      = ,     <: BEFORE_EXPR);
  
  // Comment
  def!(token LINE_COMMENT       <: COMMENT);
  def!(token BLOCK_COMMENT      <: COMMENT);
  def!(token HASHBANG           <: COMMENT);

  // Scope Wrapping
  def!(token PARENTHESIS_L  := "("    <: BEFORE_EXPR);
  def!(token PARENTHESIS_R  := ")");
  def!(token BRACKET_L      := "["    <: BEFORE_EXPR);
  def!(token BRACKET_R      := "]");
  def!(token BRACE_L        := "{"    <: BEFORE_EXPR);
  def!(token BRACE_R        := "}");

  // Values
  def!(token IDENTIFIER);
  def!(token REGEX_LITERAL        <: LITERAL);
  def!(token STRING_LITERAL       <: LITERAL);
  def!(token NUMERIC_LITERAL      <: LITERAL);
  def!(token BOOLEAN_LITERAL      <: LITERAL);
  def!(token VOID    = void       <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token TPL_STRING);
  def!(token TPL_STRING_L         <: BEFORE_EXPR);
  def!(token TPL_STRING_R);
  def!(token TPL_STRING_RL        <: BEFORE_EXPR);

  // Operation
  def!(token ARROW               = =>     <: BEFORE_EXPR);
  def!(token QUESTION            = ?      <: BEFORE_EXPR);
  def!(token DOT                 = .      <: BEFORE_EXPR);
  def!(token QUESTION_DOT       := ".?"   <: BEFORE_EXPR);
  def!(token ELIPSIS             = ...    <: BEFORE_EXPR);
  def!(token HASH                = #);
  def!(token AT                  = @);
  def!(token OP_PLUS             = +      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_INCRE           := "++"   <: OPERATOR);
  def!(token OP_MINUS            = -      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_DECRE           := "--"   <: OPERATOR);
  def!(token OP_STAR             = *      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_POW             := "**"   <: OPERATOR | BEFORE_EXPR);
  def!(token OP_DIVIDE           = /      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_MOD              = /      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_AND          = &      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_AND              = &&     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_OR           = |      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_OR               = ||     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_XOR          = ^      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_INVERT       = ~      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_EXCLAIM          = !      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_LT               = <      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_ELT              = <=     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_GT               = >      <: OPERATOR | BEFORE_EXPR);
  def!(token OP_EGT              = >=     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_LEFT         = <<     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_RIGHT        = >>     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_URIGHT      := ">>>"  <: OPERATOR | BEFORE_EXPR);
  def!(token OP_EQUAL            = ==     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_EQUAL_STRICT    := "==="  <: OPERATOR | BEFORE_EXPR);
  def!(token OP_NOT_EQUAL        = !=     <: OPERATOR | BEFORE_EXPR);
  def!(token OP_ASSIGN           = =      <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);
  def!(token OP_INCRE_ASSIGN     = +=     <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);
  def!(token OP_DECRE_ASSIGN     = -=     <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);
  def!(token OP_MULTIPLY_ASSIGN  = *=     <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);
  def!(token OP_DIVIDE_ASSIGN    = /=     <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_AND_ASSIGN   = &=     <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);
  def!(token OP_BIT_OR_ASSIGN    = |=     <: OPERATOR | ASSIGN_OPERATOR | BEFORE_EXPR);

  // Keyword - Function
  def!(token FUNCTION            = function   <: KEYWORD | RESERVED);
  def!(token RETURN              = return     <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token ASYNC               = async      <: KEYWORD);
  def!(token AWAIT               = await      <: KEYWORD | BEFORE_EXPR);
  def!(token YIELD               = throw      <: KEYWORD | BEFORE_EXPR);

  // Keyword - Class
  def!(token CLASS               = class      <: KEYWORD | RESERVED);
  def!(token EXTENDS             = extends    <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token STATIC              = static     <: KEYWORD);

  // Keyword - Flow Control
  def!(token IF                  = if         <: KEYWORD | RESERVED);
  def!(token ELSE                = else       <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token SWITCH              = switch     <: KEYWORD | RESERVED);
  def!(token CASE                = case       <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token WHILE               = while      <: KEYWORD | RESERVED | IS_LOOP);
  def!(token FOR                 = for        <: KEYWORD | RESERVED | IS_LOOP);
  def!(token BREAK               = break      <: KEYWORD | RESERVED);
  def!(token CONTINUE            = continue   <: KEYWORD | RESERVED);
  def!(token DO                  = do         <: KEYWORD | RESERVED | BEFORE_EXPR | IS_LOOP);
  def!(token WITH                = with       <: KEYWORD | RESERVED);

  // Keyword - Variable 
  def!(token VAR                 = var        <: KEYWORD | RESERVED);
  def!(token LET                 = let        <: KEYWORD);
  def!(token CONST               = const      <: KEYWORD | RESERVED);
  def!(token TYPEOF              = typeof     <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token INSTANCEOF          = instanceof <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token IN                  = in         <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token OF                  = of         <: KEYWORD | BEFORE_EXPR);
  def!(token NEW                 = new        <: KEYWORD | RESERVED | BEFORE_EXPR);
  def!(token DELETE              = delete     <: KEYWORD | RESERVED | BEFORE_EXPR);

  // Keyword - Module
  def!(token IMPORT              = import     <: KEYWORD | RESERVED);
  def!(token FROM                = from       <: KEYWORD);
  def!(token EXPORT              = export     <: KEYWORD);
  def!(token DEFAULT             = default    <: KEYWORD | BEFORE_EXPR);
  
  // Keyword - Error Handling
  def!(token TRY                 = try        <: KEYWORD | RESERVED);
  def!(token CATCH               = catch      <: KEYWORD | RESERVED);
  def!(token THROW               = throw      <: KEYWORD | RESERVED | BEFORE_EXPR);

  // Keyword - Other
  def!(token WHITE_SPACE);
  def!(token UNEXPECTED         := "");
  def!(token EOF                := "");
}

